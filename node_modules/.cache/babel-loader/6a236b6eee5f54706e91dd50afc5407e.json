{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/tirso/Escritorio/poesias/client/src/components/UI/Pagination.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Pagination, PaginationItem, PaginationLink } from \"reactstrap\";\nconst LEFT_PAGE = \"LEFT\";\nconst RIGHT_PAGE = \"RIGHT\";\n\nconst range = (from, to, step = 1) => {\n  let i = from;\n  const range = [];\n\n  while (i <= to) {\n    range.push(i);\n    i += step;\n  }\n\n  return range;\n};\n\nconst PaginationCommon = props => {\n  _s();\n\n  const {\n    totalRecords,\n    pageLimit,\n    pageNeighbours,\n    onPageChanged,\n    currentPage\n  } = props;\n  const [totalPages, setTotalPages] = useState(0);\n  useEffect(() => {\n    setTotalPages(Math.ceil(totalRecords / pageLimit)); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentPage]);\n\n  const fetchPageNumbers = () => {\n    const totalNumbers = pageNeighbours * 2 + 3;\n    const totalBlocks = totalNumbers + 2;\n\n    if (totalPages > totalBlocks) {\n      const startPage = Math.max(2, currentPage - pageNeighbours);\n      const endPage = Math.min(totalPages - 1, currentPage + pageNeighbours);\n      let pages = range(startPage, endPage);\n      const hasLeftSpill = startPage > 2;\n      const hasRightSpill = totalPages - endPage > 1;\n      const spillOffset = totalNumbers - (pages.length + 1);\n\n      switch (true) {\n        // handle: (1) < {5 6} [7] {8 9} (10)\n        case hasLeftSpill && !hasRightSpill:\n          {\n            const extraPages = range(startPage - spillOffset, startPage - 1);\n            pages = [LEFT_PAGE, ...extraPages, ...pages];\n            break;\n          }\n        // handle: (1) < {4 5} [6] {7 8} > (10)\n\n        case hasLeftSpill && hasRightSpill:\n        default:\n          {\n            pages = [LEFT_PAGE, ...pages, RIGHT_PAGE];\n            break;\n          }\n      }\n\n      return [1, ...pages, totalPages];\n    }\n\n    return range(1, totalPages);\n  };\n\n  const pages = fetchPageNumbers() || [];\n  return /*#__PURE__*/_jsxDEV(Pagination, {\n    \"aria-label\": \"Page navigation\",\n    children: pages.map((page, index) => {\n      if (page === LEFT_PAGE) return /*#__PURE__*/_jsxDEV(PaginationItem, {\n        disabled: currentPage <= 0,\n        children: /*#__PURE__*/_jsxDEV(PaginationLink, {\n          onClick: e => onPageChanged(e, currentPage - 1),\n          \"aria-label\": \"Previous\",\n          previous: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this);\n      if (page === RIGHT_PAGE) return /*#__PURE__*/_jsxDEV(PaginationItem, {\n        disabled: currentPage >= totalPages - 1,\n        children: /*#__PURE__*/_jsxDEV(PaginationLink, {\n          onClick: e => onPageChanged(e, currentPage + 1),\n          \"aria-label\": \"Next\",\n          next: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this);\n      return /*#__PURE__*/_jsxDEV(PaginationItem, {\n        active: currentPage === index,\n        children: /*#__PURE__*/_jsxDEV(PaginationLink, {\n          onClick: e => onPageChanged(e, page),\n          children: page\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PaginationCommon, \"X7V+9eWe4+6AqnnCekDmHCzUxek=\");\n\n_c = PaginationCommon;\nexport default PaginationCommon;\n\nvar _c;\n\n$RefreshReg$(_c, \"PaginationCommon\");","map":{"version":3,"sources":["/home/tirso/Escritorio/poesias/client/src/components/UI/Pagination.js"],"names":["React","useState","useEffect","Pagination","PaginationItem","PaginationLink","LEFT_PAGE","RIGHT_PAGE","range","from","to","step","i","push","PaginationCommon","props","totalRecords","pageLimit","pageNeighbours","onPageChanged","currentPage","totalPages","setTotalPages","Math","ceil","fetchPageNumbers","totalNumbers","totalBlocks","startPage","max","endPage","min","pages","hasLeftSpill","hasRightSpill","spillOffset","length","extraPages","map","page","index","e"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Pagination, PaginationItem, PaginationLink } from \"reactstrap\";\n\nconst LEFT_PAGE = \"LEFT\";\nconst RIGHT_PAGE = \"RIGHT\";\n\nconst range = (from, to, step = 1) => {\n  let i = from;\n  const range = [];\n\n  while (i <= to) {\n    range.push(i);\n    i += step;\n  }\n\n  return range;\n};\n\nconst PaginationCommon = (props) => {\n  const {\n    totalRecords,\n    pageLimit,\n    pageNeighbours,\n    onPageChanged,\n    currentPage,\n  } = props;\n  const [totalPages, setTotalPages] = useState(0);\n  useEffect(() => {\n    setTotalPages(Math.ceil(totalRecords / pageLimit));\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentPage]);\n\n  const fetchPageNumbers = () => {\n    const totalNumbers = pageNeighbours * 2 + 3;\n    const totalBlocks = totalNumbers + 2;\n\n    if (totalPages > totalBlocks) {\n      const startPage = Math.max(2, currentPage - pageNeighbours);\n      const endPage = Math.min(totalPages - 1, currentPage + pageNeighbours);\n\n      let pages = range(startPage, endPage);\n\n      const hasLeftSpill = startPage > 2;\n      const hasRightSpill = totalPages - endPage > 1;\n      const spillOffset = totalNumbers - (pages.length + 1);\n\n      switch (true) {\n        // handle: (1) < {5 6} [7] {8 9} (10)\n        case hasLeftSpill && !hasRightSpill: {\n          const extraPages = range(startPage - spillOffset, startPage - 1);\n          pages = [LEFT_PAGE, ...extraPages, ...pages];\n          break;\n        }\n        // handle: (1) < {4 5} [6] {7 8} > (10)\n        case hasLeftSpill && hasRightSpill:\n        default: {\n          pages = [LEFT_PAGE, ...pages, RIGHT_PAGE];\n          break;\n        }\n      }\n      return [1, ...pages, totalPages];\n    }\n    return range(1, totalPages);\n  };\n\n  const pages = fetchPageNumbers() || [];\n  return (\n    <Pagination aria-label=\"Page navigation\">\n      {pages.map((page, index) => {\n        if (page === LEFT_PAGE)\n          return (\n            <PaginationItem disabled={currentPage <= 0}>\n              <PaginationLink\n                onClick={(e) => onPageChanged(e, currentPage - 1)}\n                aria-label=\"Previous\"\n                previous\n              />\n            </PaginationItem>\n          );\n\n        if (page === RIGHT_PAGE)\n          return (\n            <PaginationItem disabled={currentPage >= totalPages - 1}>\n              <PaginationLink\n                onClick={(e) => onPageChanged(e, currentPage + 1)}\n                aria-label=\"Next\"\n                next\n              />\n            </PaginationItem>\n          );\n\n        return (\n          <PaginationItem active={currentPage === index} key={index}>\n            <PaginationLink onClick={(e) => onPageChanged(e, page)}>\n              {page}\n            </PaginationLink>\n          </PaginationItem>\n        );\n      })}\n    </Pagination>\n  );\n};\n\nexport default PaginationCommon;\n"]},"metadata":{},"sourceType":"module"}