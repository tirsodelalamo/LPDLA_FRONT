{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/tirso/Escritorio/poesias/client/src/components/Pages/Poetry/PoetryList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './PoetryList.css';\nimport PoetryCard from './PoetryCard';\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport CardDeck from \"react-bootstrap/CardDeck\";\n\nconst PoetryList = props => {\n  _s();\n\n  const {\n    allPoetry,\n    theme\n  } = props;\n  const [actualpage, saveActualPage] = useState(1);\n  const [totalpages, saveTotalPages] = useState(1);\n  const allPoetryFiltered = allPoetry.filter(elm => elm.tags === theme);\n  useEffect(() => {\n    const cardsPerPage = 12;\n    const calculateCardsPerPage = Math.ceil((allPoetryFiltered.length - 1) / cardsPerPage);\n    saveTotalPages(calculateCardsPerPage);\n  }, [actualpage, allPoetryFiltered]); // DEPENDENCIA ACTUALPAGE\n  //DEFINIR PAGINA ANTERIOR\n\n  const previousPage = () => {\n    const newActualPage = actualpage - 1;\n    if (newActualPage === 0) return;\n    saveActualPage(newActualPage);\n  }; //DEFINIR PAGINA SIGUIENTE\n\n\n  const nextPage = () => {\n    const newActualPage = actualpage + 1;\n    if (newActualPage > totalpages) return;\n    saveActualPage(newActualPage);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"list-container\",\n    children: [allPoetryFiltered.length < 1 || theme === \"Escoja un tema\" ? /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(CardDeck, {\n        className: \"list\",\n        children: allPoetry.map(elm => /*#__PURE__*/_jsxDEV(PoetryCard, { ...elm\n        }, elm._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Row, {\n      children: /*#__PURE__*/_jsxDEV(CardDeck, {\n        className: \"list\",\n        children: allPoetryFiltered.map(elm => /*#__PURE__*/_jsxDEV(PoetryCard, { ...elm\n        }, elm._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), actualpage === 1 ? null : /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"bbtn btn-info mr-1\",\n      onClick: previousPage,\n      children: \"\\xAB Anterior\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this), actualpage === totalpages ? null : /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"bbtn btn-info mr-1\",\n      onClick: nextPage,\n      children: \"Siguiente \\xBB\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PoetryList, \"NcNfMsyiaWRtEhlYgh683P+lPd0=\");\n\n_c = PoetryList;\nexport default PoetryList;\n\nvar _c;\n\n$RefreshReg$(_c, \"PoetryList\");","map":{"version":3,"sources":["/home/tirso/Escritorio/poesias/client/src/components/Pages/Poetry/PoetryList.js"],"names":["React","useState","useEffect","PoetryCard","Container","Row","CardDeck","PoetryList","props","allPoetry","theme","actualpage","saveActualPage","totalpages","saveTotalPages","allPoetryFiltered","filter","elm","tags","cardsPerPage","calculateCardsPerPage","Math","ceil","length","previousPage","newActualPage","nextPage","map","_id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './PoetryList.css'\n\nimport PoetryCard from './PoetryCard'\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport CardDeck from \"react-bootstrap/CardDeck\"\n\nconst PoetryList = (props) => {\n  const { allPoetry, theme } = props;\n\n  const [actualpage, saveActualPage] = useState(1);\n  const [totalpages, saveTotalPages] = useState(1);\n\n  const allPoetryFiltered = allPoetry.filter((elm) => elm.tags === theme);\n\n  useEffect(() => {\n    const cardsPerPage = 12;\n    const calculateCardsPerPage = Math.ceil(\n      (allPoetryFiltered.length - 1) / cardsPerPage\n    );\n\n    saveTotalPages(calculateCardsPerPage);\n\n  }, [actualpage, allPoetryFiltered]); // DEPENDENCIA ACTUALPAGE\n\n  //DEFINIR PAGINA ANTERIOR\n  const previousPage = () => {\n\n    const newActualPage = actualpage - 1;\n\n    if (newActualPage === 0) return;\n\n    saveActualPage(newActualPage);\n\n  };\n\n  //DEFINIR PAGINA SIGUIENTE\n  const nextPage = () => {\n\n    const newActualPage = actualpage + 1;\n\n    if (newActualPage > totalpages) return;\n\n    saveActualPage(newActualPage);\n\n  };\n\n  return (\n    <Container className=\"list-container\">\n      {allPoetryFiltered.length < 1 || theme === \"Escoja un tema\" ? (\n        <Row>\n          <CardDeck className=\"list\">\n            {allPoetry.map((elm) => (\n              <PoetryCard key={elm._id} {...elm} />\n            ))}\n          </CardDeck>\n        </Row>\n      ) : (\n        <Row>\n          <CardDeck className=\"list\">\n            {allPoetryFiltered.map((elm) => (\n              <PoetryCard key={elm._id} {...elm} />\n            ))}\n          </CardDeck>\n        </Row>\n      )}\n\n      {actualpage === 1 ? null : (\n        <button\n          type=\"button\"\n          className=\"bbtn btn-info mr-1\"\n          onClick={previousPage}\n        >\n          &laquo; Anterior\n        </button>\n      )}\n\n      {actualpage === totalpages ? null : (\n        <button\n          type=\"button\"\n          className=\"bbtn btn-info mr-1\"\n          onClick={nextPage}\n        >\n          Siguiente &raquo;\n        </button>\n      )}\n    </Container>\n  );\n}\n \nexport default PoetryList;"]},"metadata":{},"sourceType":"module"}